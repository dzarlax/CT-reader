#!/usr/bin/env python3
"""
Demo Script - CT Analysis Modes Demonstration
Demonstrates different analysis modes with sample data
"""

import os
import sys
from datetime import datetime
from ct_analyzer import CTAnalyzer

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–£–¢–ï–ô
# =============================================================================

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å DICOM-—Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
# –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
INPUT_DIRECTORY = "input"

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π):
# INPUT_DIRECTORY = "input_test"        # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# INPUT_DIRECTORY = "input_production"  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã—Ö  
# INPUT_DIRECTORY = "samples"           # –î–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤
# INPUT_DIRECTORY = "/path/to/dicom"    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {INPUT_DIRECTORY}")
print(f"üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(INPUT_DIRECTORY)}")

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
# =============================================================================

def demo_med42_analysis():
    """Demonstrate Med42 specialized analysis"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MED42 –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ò–ò –º–æ–¥–µ–ª—å")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run Med42 analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="med42")
        
        if result:
            print("‚úÖ Med42 –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
        else:
            print("‚ùå Med42 –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Med42: {e}")

def demo_hybrid_analysis():
    """Demonstrate hybrid Llama Vision + Med42 analysis"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç Llama Vision (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) + Med42 (–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è)")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run hybrid analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="hybrid")
        
        if result:
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_stages', 'N/A')}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.get('tokens_used', 'N/A')}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
        else:
            print("‚ùå –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def demo_gemma_analysis():
    """Demonstrate Gemma 3 analysis with enhanced image selection"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø GEMMA 3 –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ê–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –æ—Ä–≥–∞–Ω–æ–≤")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run Gemma 3 analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="gemma")
        
        if result:
            print("‚úÖ Gemma 3 –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
            
            # Show enhanced features
            print("\n=== –û–°–û–ë–ï–ù–ù–û–°–¢–ò –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
            print("- –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            print("- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–æ–≤")
            print("- –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print("- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π")
        else:
            print("‚ùå Gemma 3 –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Gemma 3: {e}")

def demo_intelligent_analysis():
    """Demonstrate intelligent three-stage analysis"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    print("–¢—Ä—ë—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑: 1) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∞ 2) –ö–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞—Ç–æ–º–∏–∏ 3) –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run intelligent analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="intelligent")
        
        if result:
            print("‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
            
            # Show stages information
            stages = result.get('stages', {})
            if stages:
                print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú ===")
                
                # Stage 1 info
                subject_info = stages.get('subject_identification', {})
                if subject_info:
                    print(f"üìã –≠–¢–ê–ü 1 - –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞: {subject_info.get('subject_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {subject_info.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                # Stage 2 info  
                anatomy_info = stages.get('anatomical_mapping', {})
                if anatomy_info:
                    regions = len(anatomy_info.get('important_regions', []))
                    organs = len(anatomy_info.get('organ_locations', {}))
                    print(f"üó∫Ô∏è  –≠–¢–ê–ü 2 - –†–µ–≥–∏–æ–Ω–æ–≤: {regions}, –û—Ä–≥–∞–Ω–æ–≤: {organs}")
                
                # Stage 3 info
                medical_info = stages.get('medical_analysis', {})
                if medical_info:
                    pathological = len(medical_info.get('pathological_findings', []))
                    organ_specific = len(medical_info.get('organ_specific_findings', []))
                    print(f"üè• –≠–¢–ê–ü 3 - –ü–∞—Ç–æ–ª–æ–≥–∏–π: {pathological}, –û—Ä–≥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫: {organ_specific}")
            
        else:
            print("‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def demo_comprehensive_analysis():
    """Demonstrate comprehensive analysis of ALL images"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ê–Ω–∞–ª–∏–∑ –í–°–ï–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run comprehensive analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="comprehensive")
        
        if result:
            print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
            print(f"–°–µ—Å—Å–∏—è: {result.get('session_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {result.get('context_file', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # Show comprehensive features
            print("\n=== –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
            print("- –ê–Ω–∞–ª–∏–∑ –í–°–ï–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏")
            print("- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
            print("- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –∑–Ω–∞–Ω–∏–π")
            print("- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print("- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
            print("- –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò")
        else:
            print("‚ùå –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def show_comprehensive_sessions():
    """Show available comprehensive analysis sessions"""
    from comprehensive_analyzer import ComprehensiveAnalyzer
    
    print("\n=== –î–û–°–¢–£–ü–ù–´–ï –°–ï–°–°–ò–ò –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    
    analyzer = ComprehensiveAnalyzer()
    sessions = analyzer.list_sessions()
    
    if sessions:
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
        for i, session_id in enumerate(sessions[:10], 1):  # Show last 10
            session_data = analyzer.load_session(session_id)
            if session_data:
                status = session_data.get('status', 'unknown')
                total_images = session_data.get('total_images', '?')
                processed = session_data.get('progress', {}).get('processed', '?')
                print(f"  {i}. {session_id} - {status} ({processed}/{total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            else:
                print(f"  {i}. {session_id} - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print("–°–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏")

def compare_analysis_modes():
    """Compare all available analysis modes"""
    print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í –ê–ù–ê–õ–ò–ó–ê ===")
    
    analyzer = CTAnalyzer()
    
    if not analyzer.validate_input(INPUT_DIRECTORY):
        print("–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    available_modes = analyzer.get_available_modes()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º comprehensive —Ä–µ–∂–∏–º –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π)
    modes = [mode for mode in available_modes if mode != "comprehensive"]
    
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {', '.join(modes)}")
    
    results = {}
    
    for mode in modes:
        print(f"\n–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∂–∏–º–µ: {mode}")
        try:
            result = analyzer.analyze_directory(INPUT_DIRECTORY, mode=mode)
            if result:
                results[mode] = {
                    'success': True,
                    'image_count': result['image_count'],
                    'timestamp': result['timestamp'],
                    'summary': result.get('summary', '–ù–µ—Ç —Ä–µ–∑—é–º–µ')[:200]
                }
                print(f"‚úÖ –†–µ–∂–∏–º {mode} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                results[mode] = {'success': False, 'error': '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}
                print(f"‚ùå –†–µ–∂–∏–º {mode} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        except Exception as e:
            results[mode] = {'success': False, 'error': str(e)}
            print(f"‚ùå –†–µ–∂–∏–º {mode} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    # Display comparison results
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø ===")
    for mode, result in results.items():
        print(f"\n{mode.upper()}:")
        if result['success']:
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"  üìÖ –í—Ä–µ–º—è: {result['timestamp']}")
            print(f"  üìù –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {result['summary']}...")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    print(f"\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–ñ–ò–ú–ê–ú ===")
    print("‚Ä¢ medgemma: üè• –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å Google (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
    print("  - –ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("  - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
    print("  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("  - –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö")
    print("")
    print("‚Ä¢ med42: üìã –ë—ã—Å—Ç—Ä—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    print("  - –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å")
    print("  - –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("  - –•–æ—Ä–æ—à–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("")
    print("‚Ä¢ comprehensive: üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    print("  - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("  - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π")
    print("  - –°–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

def show_system_info():
    """Display system information"""
    print("=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ===")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {CTAnalyzer().get_available_modes()}")
    
    # Check input directory
    if os.path.exists(INPUT_DIRECTORY):
        dicom_count = 0
        for root, dirs, files in os.walk(INPUT_DIRECTORY):
            for file in files:
                if file.lower().endswith(('.dcm', '.dicom')) or '.' not in file:
                    dicom_count += 1
        print(f"DICOM-—Ñ–∞–π–ª–æ–≤ –≤ {INPUT_DIRECTORY}: {dicom_count}")
    else:
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {INPUT_DIRECTORY} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # Check output directory
    if os.path.exists("output"):
        output_files = len([f for f in os.listdir("output") if os.path.isfile(os.path.join("output", f))])
        print(f"–§–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ output/: {output_files}")
    else:
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è output/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def demo_medgemma_analysis():
    """Demonstrate MedGemma specialized medical analysis"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MEDGEMMA –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –º–æ–¥–µ–ª—å Google MedGemma 4B")
    print("–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π")
    
    try:
        analyzer = CTAnalyzer()
        
        # Check for input data
        if not analyzer.validate_input(INPUT_DIRECTORY):
            print(f"–û—à–∏–±–∫–∞: –ù–µ—Ç DICOM-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{INPUT_DIRECTORY}'")
            return
        
        # Run MedGemma analysis
        result = analyzer.analyze_directory(INPUT_DIRECTORY, mode="medgemma")
        
        if result:
            print("‚úÖ MedGemma –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['image_count']}")
            print(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result['timestamp']}")
            
            # Show MedGemma features
            print("\n=== –û–°–û–ë–ï–ù–ù–û–°–¢–ò MEDGEMMA –ê–ù–ê–õ–ò–ó–ê ===")
            print("- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å Google")
            print("- –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –≤–∏–∑—É–∞–ª—å–Ω—ã–π + –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π")
            print("- –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            print("- –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            print("- –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
            print("- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå MedGemma –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MedGemma: {e}")
        if "MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in str(e):
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω HUGGINGFACE_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
            print("   2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ google/medgemma-4b-it")
            print("   3. MedGemma –∫–ª–∏–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def main():
    """Main demo function"""
    print("=== CT READER - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê ===")
    
    # Show system info
    show_system_info()
    
    # Demo menu
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:")
        print("1. üè• MedGemma –∞–Ω–∞–ª–∏–∑ (Google –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å - –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("2. Med42 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("3. üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)")
        print("4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")
        print("5. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–π –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-6): ").strip()
            
            if choice == "0":
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
                break
            elif choice == "1":
                demo_medgemma_analysis()
            elif choice == "2":
                demo_med42_analysis()
            elif choice == "3":
                demo_comprehensive_analysis()
            elif choice == "4":
                compare_analysis_modes()
            elif choice == "5":
                show_comprehensive_sessions()
            elif choice == "6":
                show_system_info()
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                
        except KeyboardInterrupt:
            print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            continue

if __name__ == "__main__":
    main() 