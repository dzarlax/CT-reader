#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ comprehensive –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from comprehensive_analyzer import ComprehensiveAnalyzer
from image_processor import ImageProcessor

def test_fixed_comprehensive():
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û COMPREHENSIVE –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # Check if input directory exists
    if not os.path.exists("input"):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'input' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'input' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ DICOM-—Ñ–∞–π–ª—ã")
        return
    
    # Initialize image processor
    image_processor = ImageProcessor()
    comprehensive_analyzer = ComprehensiveAnalyzer()
    
    # Load images (only first 2 for testing)
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    try:
        images = image_processor.load_dicom_series("input")
        
        if not images:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'input'!")
            return
        
        # Test with just 2 images
        test_images = images[:2]
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        
        # Run comprehensive analysis
        print("\nüîç –ó–∞–ø—É—Å–∫ comprehensive –∞–Ω–∞–ª–∏–∑–∞...")
        result = comprehensive_analyzer.analyze_complete_study(test_images, mode="comprehensive_test")
        
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        print(f"–°–µ—Å—Å–∏—è: {result.get('session_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(result.keys())}")
        
        # Show available data safely
        if 'total_images' in result:
            print(f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result['total_images']}")
        if 'context_file' in result:
            print(f"–§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {result['context_file']}")
        
        # Show final report
        print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢:")
        final_report = result.get('final_report', '–û—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        print(final_report[:500] + "..." if len(final_report) > 500 else final_report)
        
        print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print("üîç –°–∏—Å—Ç–µ–º–∞ comprehensive –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìä –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ AI –∞–∫—Ç–∏–≤–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_fixed_comprehensive() 