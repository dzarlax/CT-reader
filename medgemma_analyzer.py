#!/usr/bin/env python3
"""
MedGemma Analyzer
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ CT –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MedGemma
"""

import os
import requests
from datetime import datetime
from typing import List, Dict, Any, Optional
import base64

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MedGemma
try:
    from medgemma_client import MedGemmaClient
    MEDGEMMA_AVAILABLE = True
except ImportError as e:
    MEDGEMMA_AVAILABLE = False
    print(f"‚ö†Ô∏è MedGemma –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")


class MedGemmaAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MedGemma –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.base_url = "http://localhost:11434"
        self.vision_model = "llama3.2-vision:latest"  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MedGemma –∫–ª–∏–µ–Ω—Ç
        if MEDGEMMA_AVAILABLE:
            try:
                self.medgemma_client = MedGemmaClient()
                print("‚úÖ MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.use_medgemma = True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MedGemma: {e}")
                self.medgemma_client = None
                self.use_medgemma = False
                raise ValueError("MedGemma –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            raise ValueError("MedGemma –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def analyze_study(self, images: List[Dict[str, Any]], user_context: str = "") -> Optional[Dict[str, Any]]:
        """
        Analyze complete CT study using MedGemma
        
        Args:
            images: List of DICOM images to analyze
            user_context: Additional context from user (symptoms, age, etc.)
            
        Returns:
            Complete analysis results
        """
        if not images:
            print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
            
        print(f"üè• –ó–∞–ø—É—Å–∫ MedGemma –∞–Ω–∞–ª–∏–∑–∞ ({len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        
        # Prepare study context
        study_context = "CT Study Analysis"
        if user_context:
            study_context += f"\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}"
            
        try:
            # Analyze using MedGemma client
            analysis_result = self.medgemma_client.analyze_ct_study(images, study_context)
            
            if analysis_result:
                print("‚úÖ MedGemma –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Return structured result
                return {
                    'mode': 'medgemma',
                    'model': 'MedGemma 4B (Google)',
                    'timestamp': datetime.now().isoformat(),
                    'image_count': len(images),
                    'user_context': user_context,
                    'analysis': analysis_result,
                    'success': True
                }
            else:
                print("‚ùå MedGemma –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ MedGemma –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _get_visual_description(self, image_data: Dict[str, Any], image_num: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Vision –º–æ–¥–µ–ª–∏"""
        
        try:
            prompt = f"""Analyze this CT image #{image_num} and provide a detailed visual description.

Focus on:
1. Anatomical structures visible
2. Organ appearance and morphology
3. Tissue densities and contrast
4. Any abnormal findings or variations
5. Image quality and technical factors

Provide objective, detailed visual findings that can be used for medical interpretation."""
            
            payload = {
                "model": self.vision_model,
                "prompt": prompt,
                "images": [image_data['base64_image']],
                "stream": False,
                "options": {
                    "temperature": 0.3,  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    "num_predict": 600
                }
            }
            
            response = requests.post(f"{self.base_url}/api/generate", json=payload, timeout=180)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None
    
    def _analyze_with_medgemma(self, visual_description: str, image_num: int) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é MedGemma"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            medical_prompt = f"""CT Image #{image_num} Medical Analysis

VISUAL FINDINGS:
{visual_description}

As a specialized medical AI, please provide comprehensive medical interpretation:

1. ANATOMICAL ASSESSMENT:
   - Identify anatomical structures and regions
   - Assess normal vs abnormal anatomy
   
2. PATHOLOGICAL EVALUATION:
   - Identify any pathological findings
   - Assess severity and clinical significance
   
3. DIFFERENTIAL DIAGNOSIS:
   - List possible diagnoses based on findings
   - Prioritize by likelihood
   
4. CLINICAL RECOMMENDATIONS:
   - Suggest additional imaging if needed
   - Recommend clinical correlation
   - Indicate urgency level

Please provide detailed, clinically relevant analysis."""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MedGemma –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis = self.medgemma_client.analyze_radiology_finding(
                visual_description,
                f"CT image #{image_num} analysis"
            )
            
            return analysis
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ MedGemma –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _create_final_report(self, analyses: List[str]) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á—ë—Ç"""
        
        report = f"""
=== MEDGEMMA –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ê–ù–ê–õ–ò–ó CT –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø ===

–î–ê–¢–ê –ê–ù–ê–õ–ò–ó–ê: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: {len(analyses)}
–ê–ù–ê–õ–ò–ó–ê–¢–û–†: MedGemma 4B (Google)

=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú ===

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã
        for analysis in analyses:
            report += analysis + "\n\n"
        
        # –°–æ–∑–¥–∞—ë–º –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é MedGemma
        if self.use_medgemma:
            try:
                summary_prompt = f"""Based on the following CT study analysis, provide a comprehensive summary:

{chr(10).join(analyses)}

Please provide:
1. OVERALL FINDINGS SUMMARY
2. KEY PATHOLOGICAL FINDINGS
3. CLINICAL SIGNIFICANCE
4. RECOMMENDATIONS
5. FOLLOW-UP SUGGESTIONS

Focus on the most clinically relevant findings and provide actionable recommendations."""
                
                summary = self.medgemma_client.analyze_medical_text(
                    summary_prompt,
                    "CT study comprehensive summary"
                )
                
                if summary:
                    report += f"""
=== –û–ë–©–ï–ï –†–ï–ó–Æ–ú–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø (MedGemma) ===

{summary}

=== –ö–û–ù–ï–¶ –û–¢–ß–Å–¢–ê ==="""
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: {e}")
                report += "\n=== –ö–û–ù–ï–¶ –û–¢–ß–Å–¢–ê ==="
        
        return report


def test_medgemma_analyzer():
    """–¢–µ—Å—Ç MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–ï–°–¢ MEDGEMMA –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 50)
    
    try:
        from image_processor import ImageProcessor
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not os.path.exists("input"):
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'input' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_processor = ImageProcessor()
        images = image_processor.load_dicom_series("input")
        
        if not images:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        test_images = images[:2]
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = MedGemmaAnalyzer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        result = analyzer.analyze_images(test_images)
        
        if result:
            print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç—á—ë—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üîç –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(result[:300] + "...")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    test_medgemma_analyzer() 