#!/usr/bin/env python3
"""
CT Reader - Quick Analysis Script
Analyze ALL images without interactive prompts
"""

import os
import sys
from datetime import datetime
from ct_analyzer import CTAnalyzer
from progress_logger import show_step, show_success, show_error, show_info, show_warning, get_log_file

def main():
    """Quick analysis of all images"""
    print("=== CT Reader - –ê–Ω–∞–ª–∏–∑ –í–°–ï–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===")
    show_step("–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # Check if input directory exists and has DICOM files
    input_dir = "input"
    if not os.path.exists(input_dir):
        show_error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        show_info("–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'input' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë DICOM-—Ñ–∞–π–ª—ã")
        return
    
    # Count DICOM files
    dicom_files = []
    for root, dirs, files in os.walk(input_dir):
        for file in files:
            if file.lower().endswith(('.dcm', '.dicom')) or not '.' in file:
                dicom_files.append(os.path.join(root, file))
    
    if not dicom_files:
        show_error(f"DICOM-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir}")
        show_info("–ü–æ–º–µ—Å—Ç–∏—Ç–µ DICOM-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'input'")
        return
    
    show_success(f"–ù–∞–π–¥–µ–Ω–æ {len(dicom_files)} DICOM-—Ñ–∞–π–ª–æ–≤")
    
    # Quick settings for processing ALL images
    max_images = None  # Process ALL images
    enable_parallel = True
    batch_size = 5  # Conservative batch size
    
    # Default context
    user_context = "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π CT –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
    
    # Initialize analyzer with settings
    try:
        show_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        analyzer = CTAnalyzer(
            max_images_for_medgemma=max_images,
            enable_parallel=enable_parallel,
            batch_size=batch_size
        )
        show_success("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return
    
    # Use MedGemma mode by default
    analysis_mode = 'medgemma'
    
    # Show final configuration
    print("\n=== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–´–°–¢–†–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    show_info(f"üìÅ DICOM —Ñ–∞–π–ª–æ–≤: {len(dicom_files)}")
    show_info(f"üîç –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞: {analysis_mode}")
    show_info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –í–°–ï ({len(dicom_files)})")
    show_info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    show_info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞")
    show_info(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}")
    
    # Show logging info
    log_file = get_log_file()
    show_info(f"üìã –õ–æ–≥–∏: {log_file}")
    
    print("\n" + "="*60)
    show_step("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # Run analysis
    try:
        start_time = datetime.now()
        result = analyzer.analyze_directory(input_dir, mode=analysis_mode, user_context=user_context)
        end_time = datetime.now()
        
        if result:
            duration = end_time - start_time
            show_success(f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ! –í—Ä–µ–º—è: {duration}")
            print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===")
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ")
            
            # Show summary
            show_info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(dicom_files)}")
            show_info(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {duration}")
            show_info(f"üìã –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏: {log_file}")
                
        else:
            show_warning("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 