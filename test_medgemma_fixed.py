#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import os
from image_processor import ImageProcessor
from medgemma_analyzer import MedGemmaAnalyzer

def test_medgemma_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û MEDGEMMA –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not os.path.exists("input"):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'input' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        processor = ImageProcessor()
        images = processor.load_dicom_series("input")
        
        if not images:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        test_images = images[:2]
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        img = test_images[0]
        for key in img.keys():
            if key == 'base64_image':
                print(f"  ‚úÖ {key}: {len(img[key])} —Å–∏–º–≤–æ–ª–æ–≤ base64")
            else:
                print(f"  ‚úÖ {key}: {img[key]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MedGemma –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        analyzer = MedGemmaAnalyzer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("\nüî¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        result = analyzer.analyze_study(test_images, "Dog's full body CT scan from Serbia")
        
        if result:
            print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç—á—ë—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"\nüîç –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç—á—ë—Ç–∞:")
            print("-" * 50)
            print(result[:500] + "..." if len(result) > 500 else result)
            print("-" * 50)
        else:
            print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_medgemma_analyzer() 