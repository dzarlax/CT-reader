#!/usr/bin/env python3
"""
CT Reader - Results Viewer
Utility to view and manage saved analysis results
"""

import os
import json
import sys
from datetime import datetime
from typing import List, Dict, Any, Optional
from progress_logger import show_step, show_success, show_error, show_info, show_warning

def list_saved_results() -> List[Dict[str, Any]]:
    """List all saved analysis results"""
    results = []
    output_dir = "output"
    
    if not os.path.exists(output_dir):
        return results
    
    # Find all session directories
    for item in os.listdir(output_dir):
        item_path = os.path.join(output_dir, item)
        
        if os.path.isdir(item_path) and item.startswith("session_"):
            session_id = item.replace("session_", "")
            
            # Check for session summary
            summary_file = os.path.join(item_path, "session_summary.json")
            if os.path.exists(summary_file):
                try:
                    with open(summary_file, 'r', encoding='utf-8') as f:
                        summary = json.load(f)
                    
                    results.append({
                        "session_id": session_id,
                        "session_dir": item_path,
                        "summary": summary,
                        "type": "session"
                    })
                except Exception as e:
                    show_warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        
        # Find standalone report files
        elif item.endswith(".txt") and item.startswith("medgemma_analysis_"):
            try:
                # Parse filename to extract info
                parts = item.replace("medgemma_analysis_", "").replace(".txt", "").split("_")
                if len(parts) >= 3:
                    date_part = parts[0]
                    time_part = parts[1]
                    images_part = parts[2]
                    
                    results.append({
                        "filename": item,
                        "filepath": item_path,
                        "date": date_part,
                        "time": time_part,
                        "images": images_part,
                        "type": "standalone"
                    })
            except Exception as e:
                show_warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {item}: {e}")
    
    # Sort by date (newest first)
    results.sort(key=lambda x: x.get("session_id", x.get("date", "")), reverse=True)
    return results

def display_results_list(results: List[Dict[str, Any]]):
    """Display list of available results"""
    if not results:
        show_warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("\n=== –°–û–•–†–ê–ù–Å–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===")
    
    session_count = 0
    standalone_count = 0
    
    for i, result in enumerate(results, 1):
        if result["type"] == "session":
            session_count += 1
            summary = result["summary"]
            session_id = result["session_id"]
            
            print(f"\n{i}. üìÅ –°–ï–°–°–ò–Ø: {session_id}")
            print(f"   üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {summary.get('processed_images', 'N/A')}/{summary.get('total_images', 'N/A')}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary.get('success_rate', 0):.1f}%")
            print(f"   üè• –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {summary.get('analyzer', 'N/A')}")
            print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {summary.get('batch_size', 'N/A')}")
            print(f"   üìÖ –°—Ç–∞—Ç—É—Å: {summary.get('status', 'N/A')}")
            
        elif result["type"] == "standalone":
            standalone_count += 1
            print(f"\n{i}. üìÑ –§–ê–ô–õ: {result['filename']}")
            print(f"   üìÖ –î–∞—Ç–∞: {result['date']}")
            print(f"   üïê –í—Ä–µ–º—è: {result['time']}")
            print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result['images']}")
    
    print(f"\nüìä –ò–¢–û–ì–û: {session_count} —Å–µ—Å—Å–∏–π, {standalone_count} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

def view_session_details(session_dir: str, session_id: str):
    """View detailed information about a session"""
    print(f"\n=== –î–ï–¢–ê–õ–ò –°–ï–°–°–ò–ò: {session_id} ===")
    
    # Load session summary
    summary_file = os.path.join(session_dir, "session_summary.json")
    if os.path.exists(summary_file):
        try:
            with open(summary_file, 'r', encoding='utf-8') as f:
                summary = json.load(f)
            
            print(f"üìÖ –ù–∞—á–∞–ª–æ: {summary.get('start_time', 'N/A')}")
            print(f"üìÖ –ö–æ–Ω–µ—Ü: {summary.get('end_time', 'N/A')}")
            print(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {summary.get('total_images', 'N/A')}")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {summary.get('processed_images', 'N/A')}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary.get('success_rate', 0):.1f}%")
            print(f"üè• –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {summary.get('analyzer', 'N/A')}")
            print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {summary.get('batch_size', 'N/A')}")
            print(f"üìã –°—Ç–∞—Ç—É—Å: {summary.get('status', 'N/A')}")
            
        except Exception as e:
            show_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    # List all files in session
    print(f"\nüìÅ –§–ê–ô–õ–´ –í –°–ï–°–°–ò–ò:")
    try:
        files = os.listdir(session_dir)
        files.sort()
        
        for file in files:
            file_path = os.path.join(session_dir, file)
            file_size = os.path.getsize(file_path)
            
            if file.endswith('.json'):
                print(f"   üìä {file} ({file_size:,} –±–∞–π—Ç)")
            elif file.endswith('.txt'):
                print(f"   üìÑ {file} ({file_size:,} –±–∞–π—Ç)")
            else:
                print(f"   üìã {file} ({file_size:,} –±–∞–π—Ç)")
                
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏: {e}")

def view_file_content(filepath: str, lines: int = 50):
    """View content of a file (first N lines)"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines_list = content.split('\n')
        
        print(f"\n=== –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê: {os.path.basename(filepath)} ===")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìÑ –°—Ç—Ä–æ–∫: {len(lines_list):,}")
        
        if len(lines_list) > lines:
            print(f"üìã –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {lines} —Å—Ç—Ä–æ–∫:")
            print('\n'.join(lines_list[:lines]))
            print(f"\n... (–µ—â—ë {len(lines_list) - lines} —Å—Ç—Ä–æ–∫)")
        else:
            print(f"üìã –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
            print(content)
            
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def main():
    """Main function"""
    print("=== CT Reader - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===")
    
    # List all results
    results = list_saved_results()
    display_results_list(results)
    
    if not results:
        return
    
    # Interactive menu
    while True:
        print("\n=== –ú–ï–ù–Æ ===")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏")
        print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("4. –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                # View session details
                session_results = [r for r in results if r["type"] == "session"]
                if not session_results:
                    show_warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                    continue
                
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
                for i, result in enumerate(session_results, 1):
                    print(f"{i}. {result['session_id']}")
                
                try:
                    session_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é: ")) - 1
                    if 0 <= session_choice < len(session_results):
                        selected = session_results[session_choice]
                        view_session_details(selected["session_dir"], selected["session_id"])
                    else:
                        show_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                except ValueError:
                    show_warning("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                    
            elif choice == "2":
                # View file content
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                all_files = []
                
                for result in results:
                    if result["type"] == "session":
                        session_dir = result["session_dir"]
                        try:
                            for file in os.listdir(session_dir):
                                if file.endswith(('.txt', '.json')):
                                    all_files.append({
                                        "name": f"{result['session_id']}/{file}",
                                        "path": os.path.join(session_dir, file)
                                    })
                        except:
                            pass
                    elif result["type"] == "standalone":
                        all_files.append({
                            "name": result["filename"],
                            "path": result["filepath"]
                        })
                
                if not all_files:
                    show_warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    continue
                
                for i, file_info in enumerate(all_files, 1):
                    print(f"{i}. {file_info['name']}")
                
                try:
                    file_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª: ")) - 1
                    if 0 <= file_choice < len(all_files):
                        selected_file = all_files[file_choice]
                        view_file_content(selected_file["path"])
                    else:
                        show_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                except ValueError:
                    show_warning("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                    
            elif choice == "3":
                # Refresh results
                results = list_saved_results()
                display_results_list(results)
                
            elif choice == "4":
                show_success("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            else:
                show_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1-4")
                
        except KeyboardInterrupt:
            show_success("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            show_error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 