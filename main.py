#!/usr/bin/env python3
"""
CT Reader - Main Application Entry Point
Advanced Medical Image Analysis System
"""

import os
import sys
from datetime import datetime
from ct_analyzer import CTAnalyzer
from progress_logger import show_step, show_success, show_error, show_info, show_warning, get_log_file

def get_analysis_settings():
    """Get analysis settings from user"""
    print("\n=== –ù–ê–°–¢–†–û–ô–ö–ò –ê–ù–ê–õ–ò–ó–ê ===")
    print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
    
    # Max images setting
    print("\n1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    print("   - –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100) –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    print("   - –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –í–°–ï–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    max_images = None
    while True:
        try:
            user_input = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Enter = –≤—Å–µ): ").strip()
            if not user_input:
                max_images = None
                show_success("–ë—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                break
            else:
                max_images = int(user_input)
                if max_images > 0:
                    show_success(f"–ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º—É–º {max_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    break
                else:
                    show_warning("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        except ValueError:
            show_warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
        except KeyboardInterrupt:
            show_warning("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return None, None, None
    
    # Batch size setting
    print("\n2. –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ):")
    print("   - –ú–µ–Ω—å—à–µ = –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏, –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    print("   - –ë–æ–ª—å—à–µ = –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏, –±—ã—Å—Ç—Ä–µ–µ")
    print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 3-10")
    
    batch_size = 5
    while True:
        try:
            user_input = input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
            if not user_input:
                batch_size = 5
                break
            else:
                batch_size = int(user_input)
                if 1 <= batch_size <= 50:
                    break
                else:
                    show_warning("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50")
        except ValueError:
            show_warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            show_warning("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return None, None, None
    
    show_success(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    
    # Parallel processing (always enabled for now)
    enable_parallel = True
    show_info("–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞")
    
    return max_images, enable_parallel, batch_size

def main():
    """Main application entry point"""
    print("=== CT Reader - Advanced Medical Image Analysis ===")
    show_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ö–¢-—Å–Ω–∏–º–∫–æ–≤")
    
    # Check if input directory exists and has DICOM files
    input_dir = "input"
    if not os.path.exists(input_dir):
        show_error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        show_info("–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'input' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë DICOM-—Ñ–∞–π–ª—ã")
        return
    
    # Count DICOM files
    dicom_files = []
    for root, dirs, files in os.walk(input_dir):
        for file in files:
            if file.lower().endswith(('.dcm', '.dicom')) or not '.' in file:
                dicom_files.append(os.path.join(root, file))
    
    if not dicom_files:
        show_error(f"DICOM-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir}")
        show_info("–ü–æ–º–µ—Å—Ç–∏—Ç–µ DICOM-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'input'")
        return
    
    show_success(f"–ù–∞–π–¥–µ–Ω–æ {len(dicom_files)} DICOM-—Ñ–∞–π–ª–æ–≤")
    
    # Get analysis settings
    max_images, enable_parallel, batch_size = get_analysis_settings()
    if max_images is None and enable_parallel is None and batch_size is None:
        return  # User cancelled
    
    # Get additional context from user
    print("\n=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
    print("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print("(–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Å–∏–º–ø—Ç–æ–º—ã, –æ–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ —Ç.–¥.)")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
    
    try:
        user_context = input("\n–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ").strip()
        if user_context:
            show_success(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {user_context[:100]}{'...' if len(user_context) > 100 else ''}")
        else:
            user_context = ""
            show_info("–ê–Ω–∞–ª–∏–∑ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    except KeyboardInterrupt:
        show_warning("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    
    # Initialize analyzer with settings
    try:
        show_step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        analyzer = CTAnalyzer(
            max_images_for_medgemma=max_images,
            enable_parallel=enable_parallel,
            batch_size=batch_size
        )
        show_success("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)")
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return
    
    # Analysis mode selection
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print("1. üè• MedGemma - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ò–ò –º–æ–¥–µ–ª—å Google (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
    print("2. Med42 - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ò–ò –º–æ–¥–µ–ª—å")
    print("3. üîç Comprehensive - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ (1-3): ").strip()
            if choice in ['1', '2', '3']:
                break
            show_warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
        except KeyboardInterrupt:
            show_warning("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
    
    # Map choice to analysis mode
    mode_map = {
        '1': 'medgemma',
        '2': 'med42', 
        '3': 'comprehensive'
    }
    
    analysis_mode = mode_map[choice]
    show_success(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {analysis_mode}")
    
    # Show final configuration
    print("\n=== –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===")
    show_info(f"üìÅ DICOM —Ñ–∞–π–ª–æ–≤: {len(dicom_files)}")
    show_info(f"üîç –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞: {analysis_mode}")
    show_info(f"üñºÔ∏è –ú–∞–∫—Å. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'–≤—Å–µ' if max_images is None else max_images}")
    show_info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    show_info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if enable_parallel else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
    if user_context:
        show_info(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {user_context[:50]}{'...' if len(user_context) > 50 else ''}")
    
    # Show logging info
    log_file = get_log_file()
    show_info(f"üìã –õ–æ–≥–∏: {log_file}")
    
    # Confirm start
    print("\n" + "="*50)
    try:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
    except KeyboardInterrupt:
        show_warning("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # Run analysis
    try:
        show_step("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞")
        result = analyzer.analyze_directory(input_dir, mode=analysis_mode, user_context=user_context)
        
        if result:
            show_success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===")
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ")
            
            # Show context info if provided
            if user_context:
                show_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {user_context}")
                
            # Show log file location
            show_info(f"–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {log_file}")
                
        else:
            show_warning("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        show_error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 