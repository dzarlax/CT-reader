#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è CT Reader
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU, –ø–∞–º—è—Ç–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import torch
import psutil
from datetime import datetime

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –∏ CUDA"""
    print("üîß –ü–†–û–í–ï–†–ö–ê GPU")
    print("=" * 40)
    
    # CUDA –ø—Ä–æ–≤–µ—Ä–∫–∞
    cuda_available = torch.cuda.is_available()
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {'‚úÖ' if cuda_available else '‚ùå'}")
    
    if cuda_available:
        device_count = torch.cuda.device_count()
        print(f"CUDA —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_count}")
        
        for i in range(device_count):
            props = torch.cuda.get_device_properties(i)
            memory_gb = props.total_memory / 1024**3
            print(f"  GPU {i}: {props.name}")
            print(f"    –ü–∞–º—è—Ç—å: {memory_gb:.1f}GB")
            print(f"    Compute capability: {props.major}.{props.minor}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
            torch.cuda.set_device(i)
            torch.cuda.empty_cache()
            memory_free = torch.cuda.memory_reserved(i) / 1024**3
            memory_used = torch.cuda.memory_allocated(i) / 1024**3
            print(f"    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory_used:.1f}GB")
            print(f"    –°–≤–æ–±–æ–¥–Ω–æ: {memory_gb - memory_used:.1f}GB")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if memory_gb >= 8:
                print(f"    –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è MedGemma")
            elif memory_gb >= 4:
                print(f"    –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç")
            else:
                print(f"    –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏")
    
    # MPS –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è Mac)
    mps_available = torch.backends.mps.is_available()
    if mps_available:
        print(f"MPS –¥–æ—Å—Ç—É–ø–Ω–∞: ‚úÖ")
    
    print()

def check_memory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("üíæ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–û–ô –ü–ê–ú–Ø–¢–ò")
    print("=" * 40)
    
    memory = psutil.virtual_memory()
    memory_gb = memory.total / 1024**3
    memory_available_gb = memory.available / 1024**3
    memory_used_percent = memory.percent
    
    print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory_gb:.1f}GB")
    print(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_available_gb:.1f}GB")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory_used_percent:.1f}%")
    
    if memory_gb >= 16:
        print("–°—Ç–∞—Ç—É—Å: ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏")
    elif memory_gb >= 8:
        print("–°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
    else:
        print("–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏")
    
    print()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 40)
    
    dependencies = [
        ("torch", "PyTorch"),
        ("transformers", "Transformers"),
        ("accelerate", "Accelerate"),
        ("Pillow", "PIL"),
        ("pydicom", "PyDICOM"),
        ("numpy", "NumPy"),
        ("requests", "Requests")
    ]
    
    for package, name in dependencies:
        try:
            __import__(package)
            print(f"{name}: ‚úÖ")
        except ImportError:
            print(f"{name}: ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print()

def check_huggingface_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Hugging Face"""
    print("üîë –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê HUGGING FACE")
    print("=" * 40)
    
    token = os.getenv("HUGGINGFACE_TOKEN")
    if token:
        print(f"–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: ‚úÖ")
        print(f"–¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {token[:10]}...")
    else:
        print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ‚ùå")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å HUGGINGFACE_TOKEN=your_token")
    
    print()

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ô")
    print("=" * 40)
    
    directories = ["input", "output", "context", "temp"]
    
    for directory in directories:
        if os.path.exists(directory):
            print(f"{directory}/: ‚úÖ")
        else:
            print(f"{directory}/: ‚ùå –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DICOM —Ñ–∞–π–ª–æ–≤
    if os.path.exists("input"):
        dicom_files = []
        for root, dirs, files in os.walk("input"):
            for file in files:
                if file.lower().endswith(('.dcm', '.dicom')) or '.' not in file:
                    dicom_files.append(os.path.join(root, file))
        
        print(f"DICOM —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(dicom_files)}")
    
    print()

def test_medgemma_init():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MedGemma"""
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MEDGEMMA")
    print("=" * 40)
    
    try:
        from medgemma_client import MedGemmaClient
        print("–ò–º–ø–æ—Ä—Ç MedGemma –∫–ª–∏–µ–Ω—Ç–∞: ‚úÖ")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π)
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MedGemma –∫–ª–∏–µ–Ω—Ç–∞...")
        client = MedGemmaClient()
        print("MedGemma –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ‚úÖ")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ MedGemma: ‚ùå {e}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç CT READER - –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Python: {sys.version}")
    print(f"Platform: {sys.platform}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_gpu()
    check_memory()
    check_dependencies()
    check_huggingface_token()
    check_directories()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MedGemma (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
    response = input("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é MedGemma? (y/n): ").lower()
    if response == 'y':
        test_medgemma_init()
    
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)

if __name__ == "__main__":
    main() 